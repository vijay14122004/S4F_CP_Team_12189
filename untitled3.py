# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F50GFU2iJI0S5xTBKYzgOGhadfoaChps
"""

#import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset (Assume data is in a CSV file named 'crop_data.csv')
# Dataset includes: 'rainfall', 'temperature', 'soil_quality', 'crop_yield'
data = pd.read_csv('crop_data.csv')

# Quick look at the dataset
print("Dataset Preview:")
print(data.head())

# Check for missing values
print("\nMissing values:")
print(data.isnull().sum())

# Handle missing values (if any)
data = data.dropna()

# Feature selection
features = ['rainfall', 'temperature', 'soil_quality']
X = data[features]
y = data['crop_yield']

# Split the dataset (80% training, 20% testing)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Build a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predict crop yields
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f"\nModel Performance:\nMSE: {mse:.2f}\nRÂ²: {r2:.2f}")

# Visualize prediction results
plt.figure(figsize=(8, 6))
sns.scatterplot(x=y_test, y=y_pred)
plt.xlabel("Actual Yield")
plt.ylabel("Predicted Yield")
plt.title("Actual vs Predicted Crop Yield")
plt.grid(True)
plt.show()

# Feature importance
importances = model.feature_importances_
feature_importance_df = pd.DataFrame({'Feature': features, 'Importance': importances})
print("\nFeature Importances:")
print(feature_importance_df.sort_values(by='Importance', ascending=False))